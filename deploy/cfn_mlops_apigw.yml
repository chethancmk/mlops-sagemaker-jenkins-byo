AWSTemplateFormatVersion: 2010-09-09
Description: ML inference API Stack (API GW + Lambda)

Parameters:
  apiGatewayName:
    Type: String
    Default: mlops_iris_api
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: call
  apiGatewayHTTPMethod:
    Type: String
    Default: POST
  inferenceEndpoint:
    Type: String
    Default: scikit-byo-Prod    
  lambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: mlops-iris-inference

Resources:
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Publuc ML Inference EndPoint
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethod
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST        
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
        IntegrationResponses:
        - StatusCode: 200             
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway
      MethodResponses:
      - StatusCode: 200
        ResponseModels: { "application/json": "Empty" }      

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import os
          import io
          import boto3
          import json
          import csv

          # grab environment variables
          ENDPOINT_NAME = os.environ['ENDPOINT_NAME']
          runtime= boto3.client('runtime.sagemaker')

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              
              data = json.loads(json.dumps(event))
              payload = data['data']
              
              # Convert to Bytes
              invoke_endpoint_body= bytes(payload,'utf-8')
              print("[INFO]invoke_endpoint_body:", invoke_endpoint_body)
              print(invoke_endpoint_body)
              
              response = runtime.invoke_endpoint(EndpointName=ENDPOINT_NAME,
                                                ContentType='text/csv',
                                                Body=invoke_endpoint_body)
                                                
              classification = response['Body'].read().decode('ascii')
              print('[INFO]Our result for this payload is: {}'.format(response['Body'].read().decode('ascii')))              
              return classification

      Description: Iris Inference Lambda
      FunctionName: !Ref lambdaFunctionName
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          ENDPOINT_NAME: !Ref inferenceEndpoint

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com      
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*
          PolicyName: lambda
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - sagemaker:InvokeEndpoint
                Effect: Allow
                Resource: '*'                  
          PolicyName: mlops_lambda_inference

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionName}
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}

  lambdaArn:
    Value: !GetAtt lambdaFunction.Arn
